{"version":3,"sources":["list.jsx"],"names":["DealerRows","props","model","id","parentId","name","updatedAt","rows","map","row","columns","React","Component","$","dealerRows","document","getElementById","dealerJson","response","status","json","error","Error","statusText","tableInit","push","ReactDOM","render","fetch","method","credentials","then","catch","undefined"],"mappings":";;;;;;;;;;IAAMA,U;;;AAEF,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,uHACTA,KADS;AAElB;;;;kCAES;AACN,mBAAO;AAAA;AAAA;AACP;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA;AAAA;AAAA,qBAFJ;AAGI;AAAA;AAAA;AAAA;AAAA,qBAHJ;AAII;AAAA;AAAA;AAAA;AAAA,qBAJJ;AAKI;AAAA;AAAA;AAAA;AAAA;AALJ;AADO,aAAP;AASH;;;4BAEGC,K,EAAO;AACP,mBAAO;AAAA;AAAA,kBAAI,KAAKA,MAAMC,EAAf;AACH;AAAA;AAAA;AAAKD,0BAAMC;AAAX,iBADG;AAEH;AAAA;AAAA;AAAKD,0BAAME;AAAX,iBAFG;AAGH;AAAA;AAAA;AAAKF,0BAAMG;AAAX,iBAHG;AAIH,4CAAI,WAAU,YAAd,EAA2B,aAAYH,MAAMI,SAA7C,GAJG;AAKH;AALG,aAAP;AAOH;;;iCAEQ;;AAEL,gBAAMC,OAAO,KAAKN,KAAL,CAAWM,IAAX,CAAgBC,GAAhB,CAAoB,KAAKC,GAAzB,CAAb;;AAEA,mBAAO;AAAA;AAAA,kBAAO,WAAU,qBAAjB;AACF,qBAAKC,OAAL,EADE;AAEH;AAAA;AAAA;AACEH;AADF;AAFG,aAAP;AAMH;;;;EAtCoBI,MAAMC,S;;AAyC/BC,EAAE,YAAY;;AAEV,QAAMC,aAAaC,SAASC,cAAT,CAAwB,SAAxB,CAAnB;AACA,QAAIC,aAAa,EAAjB;;AAEA,aAASC,QAAT,CAAkBA,QAAlB,EAA4B;AACxB,YAAIA,SAASC,MAAT,KAAoB,GAApB,IAA2BD,SAASC,MAAT,KAAoB,GAAnD,EAAwD;AACpD,mBAAOD,SAASE,IAAT,EAAP;AACH;;AAED,YAAIC,QAAQ,IAAIC,KAAJ,CAAUJ,SAASK,UAAnB,CAAZ;AACAF,cAAMH,QAAN,GAAiBA,QAAjB;AACA,cAAMG,KAAN;AACH;;AAED,aAASG,SAAT,CAAmBJ,IAAnB,EAAyB;AACrB,YAAI,OAAOA,KAAKjB,EAAZ,KAAmB,WAAvB,EAAoC;AAChCc,yBAAaG,IAAb;AACH,SAFD,MAGK;AACDH,uBAAWQ,IAAX,CAAgBL,IAAhB;AACH;;AAEDM,iBAASC,MAAT,CACI,oBAAC,UAAD,IAAY,MAAMV,UAAlB,GADJ,EAEIH,UAFJ;AAIH;;AAEDc,UAAM,+BAAN,EAAuC;AACnCC,gBAAQ,KAD2B;AAEnCC,qBAAa;AAFsB,KAAvC,EAGGC,IAHH,CAGQb,QAHR,EAGkBa,IAHlB,CAGuBP,SAHvB,EAGkCQ,KAHlC,CAGwC;AAAA,eAAMC,SAAN;AAAA,KAHxC;AAKH,CAlCD","file":"list.js","sourcesContent":["class DealerRows extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    columns() {\r\n        return <thead>\r\n        <tr>\r\n            <th>ID</th>\r\n            <th>Parent Id</th>\r\n            <th>Name</th>\r\n            <th>Updated At</th>\r\n            <th>Actions</th>\r\n        </tr>\r\n        </thead>;\r\n    }\r\n\r\n    row(model) {\r\n        return <tr key={model.id}>\r\n            <td>{model.id}</td>\r\n            <td>{model.parentId}</td>\r\n            <td>{model.name}</td>\r\n            <td className=\"entry-date\" data-time={ model.updatedAt }></td>\r\n            <td></td>\r\n        </tr>;\r\n    }\r\n\r\n    render() {\r\n\r\n        const rows = this.props.rows.map(this.row);\r\n\r\n        return <table className=\"table table-striped\">\r\n            {this.columns()}\r\n            <tbody>\r\n            { rows }\r\n            </tbody>\r\n        </table>;\r\n    }\r\n}\r\n\r\n$(function () {\r\n\r\n    const dealerRows = document.getElementById('content');\r\n    let dealerJson = [];\r\n\r\n    function response(response) {\r\n        if (response.status === 201 || response.status === 200) {\r\n            return response.json();\r\n        }\r\n\r\n        let error = new Error(response.statusText);\r\n        error.response = response;\r\n        throw error;\r\n    }\r\n\r\n    function tableInit(json) {\r\n        if (typeof json.id === \"undefined\") {\r\n            dealerJson = json;\r\n        }\r\n        else {\r\n            dealerJson.push(json)\r\n        }\r\n\r\n        ReactDOM.render(\r\n            <DealerRows rows={dealerJson}/>,\r\n            dealerRows\r\n        );\r\n    }\r\n\r\n    fetch('/api/soc/dealer?sort[id]=desc', {\r\n        method: 'GET',\r\n        credentials: 'include'\r\n    }).then(response).then(tableInit).catch(() => undefined);\r\n\r\n});"]}