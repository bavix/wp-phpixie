{"version":3,"sources":["list.jsx"],"names":["HeadingRows","props","model","id","parentId","title","updatedAt","rows","map","row","columns","React","Component","$","headingRows","document","getElementById","headingJson","response","status","json","error","Error","statusText","tableInit","data","push","ReactDOM","render","fetch","method","credentials","then","catch","undefined"],"mappings":";;;;;;;;;;IAAMA,W;;;AAEF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,yHACTA,KADS;AAElB;;;;kCAES;AACN,mBAAO;AAAA;AAAA;AACP;AAAA;AAAA;AACI;AAAA;AAAA;AAAA;AAAA,qBADJ;AAEI;AAAA;AAAA;AAAA;AAAA,qBAFJ;AAGI;AAAA;AAAA;AAAA;AAAA,qBAHJ;AAII;AAAA;AAAA;AAAA;AAAA,qBAJJ;AAKI;AAAA;AAAA;AAAA;AAAA;AALJ;AADO,aAAP;AASH;;;4BAEGC,K,EAAO;AACP,mBAAO;AAAA;AAAA,kBAAI,KAAKA,MAAMC,EAAf;AACH;AAAA;AAAA;AAAKD,0BAAMC;AAAX,iBADG;AAEH;AAAA;AAAA;AAAKD,0BAAME;AAAX,iBAFG;AAGH;AAAA;AAAA;AAAKF,0BAAMG;AAAX,iBAHG;AAIH,4CAAI,WAAU,YAAd,EAA2B,aAAYH,MAAMI,SAA7C,GAJG;AAKH;AALG,aAAP;AAOH;;;iCAEQ;;AAEL,gBAAMC,OAAO,KAAKN,KAAL,CAAWM,IAAX,CAAgBC,GAAhB,CAAoB,KAAKC,GAAzB,CAAb;;AAEA,mBAAO;AAAA;AAAA,kBAAO,WAAU,qBAAjB;AACF,qBAAKC,OAAL,EADE;AAEH;AAAA;AAAA;AACEH;AADF;AAFG,aAAP;AAMH;;;;EAtCqBI,MAAMC,S;;AAyChCC,EAAE,YAAY;;AAEV,QAAMC,cAAcC,SAASC,cAAT,CAAwB,SAAxB,CAApB;AACA,QAAIC,cAAc,EAAlB;;AAEA,aAASC,QAAT,CAAkBA,QAAlB,EAA4B;AACxB,YAAIA,SAASC,MAAT,KAAoB,GAApB,IAA2BD,SAASC,MAAT,KAAoB,GAAnD,EAAwD;AACpD,mBAAOD,SAASE,IAAT,EAAP;AACH;;AAED,YAAIC,QAAQ,IAAIC,KAAJ,CAAUJ,SAASK,UAAnB,CAAZ;AACAF,cAAMH,QAAN,GAAiBA,QAAjB;AACA,cAAMG,KAAN;AACH;;AAED,aAASG,SAAT,CAAmBJ,IAAnB,EAAyB;AACrB,YAAI,OAAOA,KAAKjB,EAAZ,KAAmB,WAAvB,EAAoC;AAChCc,0BAAcG,KAAKK,IAAnB;AACH,SAFD,MAGK;AACDR,wBAAYS,IAAZ,CAAiBN,KAAKK,IAAtB;AACH;;AAEDE,iBAASC,MAAT,CACI,oBAAC,WAAD,IAAa,MAAMX,WAAnB,GADJ,EAEIH,WAFJ;AAIH;;AAEDe,UAAM,gCAAN,EAAwC;AACpCC,gBAAQ,KAD4B;AAEpCC,qBAAa;AAFuB,KAAxC,EAGGC,IAHH,CAGQd,QAHR,EAGkBc,IAHlB,CAGuBR,SAHvB,EAGkCS,KAHlC,CAGwC;AAAA,eAAMC,SAAN;AAAA,KAHxC;AAKH,CAlCD","file":"list.js","sourcesContent":["class HeadingRows extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    columns() {\n        return <thead>\n        <tr>\n            <th>ID</th>\n            <th>Parent Id</th>\n            <th>Title</th>\n            <th>Updated At</th>\n            <th>Actions</th>\n        </tr>\n        </thead>;\n    }\n\n    row(model) {\n        return <tr key={model.id}>\n            <td>{model.id}</td>\n            <td>{model.parentId}</td>\n            <td>{model.title}</td>\n            <td className=\"entry-date\" data-time={ model.updatedAt }></td>\n            <td></td>\n        </tr>;\n    }\n\n    render() {\n\n        const rows = this.props.rows.map(this.row);\n\n        return <table className=\"table table-striped\">\n            {this.columns()}\n            <tbody>\n            { rows }\n            </tbody>\n        </table>;\n    }\n}\n\n$(function () {\n\n    const headingRows = document.getElementById('content');\n    let headingJson = [];\n\n    function response(response) {\n        if (response.status === 201 || response.status === 200) {\n            return response.json();\n        }\n\n        let error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n    }\n\n    function tableInit(json) {\n        if (typeof json.id === \"undefined\") {\n            headingJson = json.data;\n        }\n        else {\n            headingJson.push(json.data)\n        }\n\n        ReactDOM.render(\n            <HeadingRows rows={headingJson}/>,\n            headingRows\n        );\n    }\n\n    fetch('/api/soc/heading?sort[id]=desc', {\n        method: 'GET',\n        credentials: 'include'\n    }).then(response).then(tableInit).catch(() => undefined);\n\n});"]}